version: 2
jobs:
  build:
    parallelism: 3
    working_directory: ~/circleci-demo-ruby-rails
    docker:
      - image: circleci/ruby:2.4.1-node
        environment:
          RAILS_ENV: test
      - image: circleci/postgres:9.6-alpine
        environment:
          - POSTGRES_USER=root
          - POSTGRES_DB=circle_test
    environment:
      TEST_DATABASE_URL: postgresql://root@localhost:5432/circle_test
      CC_TEST_REPORTER_ID: 28c2b96545fbe5547c0e4f44e4f7439e1dbf3abceca4e37e965aa49e4f39be09

    steps:
      - checkout

      # Restore bundle cache
      - restore_cache:
          key: rails-demo-{{ checksum "Gemfile.lock" }}

      # Bundle install dependencies
      - run: bundle install --path vendor/bundle

      # Install CodeClimate Test Reporter
      - run: curl -L https://codeclimate.com/downloads/test-reporter/test-reporter-latest-linux-amd64 > ./cc-test-reporter
      - run: chmod +x ./cc-test-reporter

      # Store bundle cache
      - save_cache:
          key: rails-demo-{{ checksum "Gemfile.lock" }}
          paths:
            - vendor/bundle

      - run: rubocop -P

      # Database setup
      - run: bundle exec rake db:create
      - run: bundle exec rake db:schema:load

      # Run before-test CC preparation
      - run: ./cc-test-reporter before-build

      # Run rspec in parallel
      - run: |
          bundle exec rspec --profile 10 \
                            --format RspecJunitFormatter \
                            --out test_results/rspec.xml \
                            --format progress \
                            $(circleci tests glob "spec/**/*_spec.rb" | circleci tests split --split-by=timings)

      - run: ./cc-test-reporter format-coverage -t simplecov $CIRCLE_ARTIFACTS/coverage/.resultset.json

      # Save test results for timing analysis
      - store_test_results:
          path: test_results